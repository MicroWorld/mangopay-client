plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven'
    id 'idea'
    id 'com.github.ben-manes.versions' version '0.29.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'de.thetaphi.forbiddenapis' version '3.0.1'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.owasp.dependencycheck' version '5.3.2.1'
    id 'org.sonarqube' version '3.0'
}

group = 'org.microworld'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    integration {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    compile.transitive = false
    compileClasspath.transitive = false
    integrationCompile.extendsFrom testCompile
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
    integrationRuntimeOnly.extendsFrom testRuntimeOnly
    deployerJars
}

dependencies {
    implementation('com.google.code.gson:gson:2.8.6')
    implementation('org.slf4j:slf4j-api:1.7.30')
    implementation('org.apache.commons:commons-lang3:3.11')

    testImplementation('junit:junit:4.13') { exclude group: 'org.hamcrest' }
    testImplementation('org.hamcrest:hamcrest-junit:2.0.0.0')
    testImplementation('io.codearte.jfairy:jfairy:0.5.9')
    testImplementation('org.awaitility:awaitility:4.0.3')
    testRuntimeOnly('ch.qos.logback:logback-classic:1.2.3')

    deployerJars('org.apache.maven.wagon:wagon-ssh:3.4.0')
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.setDeprecation true
}

task integration(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    mustRunAfter test
}
check.dependsOn integration

license {
    header = file('LICENSE-HEADER.txt')
    exclude('**/*.pdf')
}

forbiddenApis {
    failOnUnsupportedJava = false
    bundledSignatures = [ 'jdk-unsafe', 'jdk-deprecated', 'jdk-system-out', 'jdk-non-portable' ]
}

jacoco {
    toolVersion = '0.8.5'
}
jacocoTestReport {
    executionData "$buildDir/jacoco/test.exec", "$buildDir/jacoco/integration.exec"
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

dependencyCheck {
    failBuildOnCVSS = 3
    scanConfigurations = ['runtime']
}

project.tasks['sonarqube'].dependsOn tasks.withType(Test)
sonarqube {
    properties {
        property 'sonar.tests', ['src/test/java', 'src/integration/java']
        property 'sonar.junit.reportPaths', ['build/test-results/test', 'build/test-results/integration']
        property 'sonar.surefire.reportsPath', ['build/test-results/test', 'build/test-results/integration']
        property 'sonar.coverage.jacoco.xmlReportPaths', ['build/reports/jacoco/test/jacocoTestReport.xml']
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "${abc_artifactory_contextUrl}/gradle-release-local") {
                authentication(userName: "${abc_artifactory_user}", password: "${abc_artifactory_password}")
            }
            snapshotRepository(url: "${abc_artifactory_contextUrl}/gradle-dev-local") {
                authentication(userName: "${abc_artifactory_user}", password: "${abc_artifactory_password}")
            }
        }
    }
}

release {
    buildTasks = ['assemble']
    tagTemplate = '$name-$version'
    git {
        requireBranch = 'master'
    }
}

afterReleaseBuild.dependsOn uploadArchives

idea {
    module {
        testSourceDirs += file('src/integration/java')
    }
}
